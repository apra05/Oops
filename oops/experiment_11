#include <iostream>
#include <stdexcept>

template <typename T>
class Stack {
private:
    T* arr;
    int top;
    int capacity;

public:
    Stack(int size);
    ~Stack();
    void push(const T& value);
    T pop();
    T peek() const;
    bool isEmpty() const;
    bool isFull() const;
    int size() const;
};

template <typename T>
Stack<T>::Stack(int size) {
    capacity = size;
    arr = new T[capacity];
    top = -1;
}

template <typename T>
Stack<T>::~Stack() {
    delete[] arr;
}

template <typename T>
void Stack<T>::push(const T& value) {
    if (isFull()) {
        throw std::overflow_error("Stack overflow");
    }
    arr[++top] = value;
}

template <typename T>
T Stack<T>::pop() {
    if (isEmpty()) {
        throw std::underflow_error("Stack underflow");
    }
    return arr[top--];
}

template <typename T>
T Stack<T>::peek() const {
    if (isEmpty()) {
        throw std::underflow_error("Stack is empty");
    }
    return arr[top];
}

template <typename T>
bool Stack<T>::isEmpty() const {
    return top == -1;
}

template <typename T>
bool Stack<T>::isFull() const {
    return top == capacity - 1;
}

template <typename T>
int Stack<T>::size() const {
    return top + 1;
}

int main() {
    try {
        Stack<int> intStack(5);
        intStack.push(10);
        intStack.push(20);
        intStack.push(30);

        std::cout << "Top element: " << intStack.peek() << std::endl;
        std::cout << "Popped element: " << intStack.pop() << std::endl;

        std::cout << "Current stack size: " << intStack.size() << std::endl;

        Stack<std::string> strStack(3);
        strStack.push("Hello");
        strStack.push("World");

        std::cout << "Top string element: " << strStack.peek() << std::endl;
        std::cout << "Popped string: " << strStack.pop() << std::endl;
    }
    catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
