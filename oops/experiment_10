#include <iostream>
#include <stdexcept>
#include <string>

class InsufficientFundException : public std::exception {
public:
    const char* what() const noexcept override {
        return "Error: Insufficient funds for withdrawal.";
    }
};

class BankAccount {
private:
    double balance;

public:
    BankAccount(double initialBalance) {
        if (initialBalance < 0) {
            throw std::invalid_argument("Initial balance cannot be negative.");
        }
        balance = initialBalance;
    }

    void deposit(double amount) {
        if (amount < 0) {
            throw std::invalid_argument("Deposit amount cannot be negative.");
        }
        balance += amount;
        std::cout << "Deposited: $" << amount << ". New balance: $" << balance << std::endl;
    }

    void withdraw(double amount) {
        if (amount < 0) {
            throw std::invalid_argument("Withdrawal amount cannot be negative.");
        }
        if (amount > balance) {
            throw InsufficientFundException();
        }
        balance -= amount;
        std::cout << "Withdrawn: $" << amount << ". New balance: $" << balance << std::endl;
    }

    double getBalance() const {
        return balance;
    }
};

int main() {
    try {
        BankAccount account(500.0);
        account.deposit(200.0);
        account.withdraw(150.0);
        account.withdraw(600.0);
    } catch (const InsufficientFundException& e) {
        std::cerr << e.what() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
